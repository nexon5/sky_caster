from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import requests
import os
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OWM_API_KEY = os.getenv("OWM_API_KEY")


# –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø SkyCastBot üå§Ô∏è –ì–æ—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –ø–æ–≥–æ–¥—É :)")

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: /weather Kyiv")
        return

    city = " ".join(context.args)
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={OWM_API_KEY}&units=metric&lang=ru"
    response = requests.get(url).json()

    if response.get("cod") != 200:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ üò¢")
        return

    data = response
    weather_desc = data["weather"][0]["description"]
    temp = data["main"]["temp"]
    feels_like = data["main"]["feels_like"]
    wind = data["wind"]["speed"]

    await update.message.reply_text(
        f"üåç –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
        f"ü§ó –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
        f"üí® –í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
        f"üåà –û–ø–∏—Å–∞–Ω–∏–µ: {weather_desc.capitalize()}"
    )

async def forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: /forecast Kyiv")
        return

    city = " ".join(context.args)
    url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={OWM_API_KEY}&units=metric&lang=ru"
    response = requests.get(url).json()

    if response.get("cod") != "200":
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ üò¢")
        return

    forecast_list = response["list"][:5]  # –ë–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–µ 5 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ 15 —á–∞—Å–æ–≤)
    msg = f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city.title()} –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å—ã:\n"

    for entry in forecast_list:
        time = entry["dt_txt"][11:16]  # –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
        temp = entry["main"]["temp"]
        desc = entry["weather"][0]["description"]
        msg += f"\nüïí {time}: {temp}¬∞C, {desc.capitalize()}"

    await update.message.reply_text(msg)

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("weather", weather))
    app.add_handler(CommandHandler("forecast", forecast))


    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
